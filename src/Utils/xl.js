import * as XLSX from "xlsx";
import { saveAs } from "file-saver";
import { jsPDF } from "jspdf";
import toast from "react-hot-toast";


export const ExportExcel = (data = [], fileName = "ExportedData.xlsx", sheet = "sheet1") => {
    if (!data.length) {
      return toast.error("No data available to export");
    }
  
    // Step 1: Dynamically extract fields from the first object
    const fields = Object.keys(data[0] || {});
  
    // Step 2: Format the data to ensure field order
    const formattedData = data.map((row) =>
      fields.reduce((acc, field) => {
        acc[field] = row[field] || "N/A"; // Enforce field order and default value
        return acc;
      }, {})
    );
  
    // Step 3: Create a worksheet
    const worksheet = XLSX.utils.json_to_sheet(formattedData);
  
    // Step 4: Create a workbook
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, sheet);
  
    // Step 5: Write the workbook directly to file
    XLSX.writeFile(workbook, fileName); // Automatically triggers the file download
  };

// ........................... pdf ................................. //
const generatePDFContent = (pdf, data, schoolName = "Student Diwan", fields = null) => {
    if (!data || data.length === 0) {
        throw new Error("Data is required to generate the table.");
    }

    // Automatically generate fields if not provided
    const dynamicFields = fields || Object.keys(data[0]);

    // Add title to the PDF
    pdf.setFontSize(18);
    pdf.setTextColor("#4A90E2"); // Blue color for the title
    pdf.text("Exported Data", 10, 10);
    pdf.setDrawColor(0);
    pdf.setLineWidth(0.5);
    pdf.line(10, 15, 200, 15); // Horizontal line below the title

    // Add table headers dynamically
    pdf.setFontSize(14);
    pdf.setFont(undefined, "bold");
    let startX = 10;
    let startY = 25;
    const columnWidth = 180 / dynamicFields.length; // Dynamically calculate column width based on available space

    dynamicFields.forEach((field, index) => {
        const fieldName = field.length > 15 ? field.slice(0, 12) + "..." : field; // Truncate long headers
        pdf.text(fieldName, startX + index * columnWidth, startY, { maxWidth: columnWidth });
    });

    pdf.setFont(undefined, "normal");

    // Adjust row height dynamically based on number of rows
    const rowHeight = 10;
    let currentY = startY + rowHeight;
    const maxRowsPerPage = Math.floor((280 - startY - 20) / rowHeight); // Dynamic rows per page based on page height

    data.forEach((item, index) => {
        if ((index + 1) % maxRowsPerPage === 0) {
            pdf.addPage(); // Add a new page if row limit exceeds
            currentY = 25; // Reset Y position
            // Re-add headers on the new page
            pdf.setFontSize(14);
            pdf.setFont(undefined, "bold");
            dynamicFields.forEach((field, fieldIndex) => {
                const fieldName = field.length > 15 ? field.slice(0, 12) + "..." : field;
                pdf.text(fieldName, startX + fieldIndex * columnWidth, currentY, { maxWidth: columnWidth });
            });
            currentY += rowHeight; // Adjust Y after headers
            pdf.setFont(undefined, "normal");
        }

        dynamicFields.forEach((field, fieldIndex) => {
            const value = item[field] ? item[field].toString() : "";
            pdf.text(value, startX + fieldIndex * columnWidth, currentY, { maxWidth: columnWidth });
        });
        currentY += rowHeight; // Move to the next row
    });

    // Add footer
    pdf.setFontSize(10);
    pdf.setTextColor("#777");
    pdf.text(`Generated by ${schoolName}`, 10, 290);
};


  export const ExportPDF = (data = [], fileName = "ExportedData.pdf",schoolName) => {
    if (!data.length) {
      return toast.error("No data available to export");
    }
  
    const pdf = new jsPDF();
    generatePDFContent(pdf, data, schoolName);
    pdf.save(fileName);
  };
  